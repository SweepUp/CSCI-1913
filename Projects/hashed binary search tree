class HBST<Key, Value> {
	
	private class ValueNode {
		private Key key;
		private Value value;
		private ValueNode next;
		private ValueNode(Key key, Value value, ValueNode next) 
			{
			this.key = key;
			this.value = value;
			this.next = next; 
			}
		}

	private class TreeNode {
		private int key;
		private ValueNode value;
		private TreeNode left;
		private TreeNode right;
		private TreeNode(int key, ValueNode value, TreeNode left, TreeNode right)
			{
			this.key = key;
			this.value = value;
			this.left = left;
			this.right = right;
			}
		}
	
	private TreeNode head;
	
	public HBST() {
		head = new TreeNode(-1, null, null, null);
	}
	
	private boolean isEqual(Key left, Key right) {
		if (left == null || right == null)
			return left == right;
		else
			return left.equals(right);
	}
	
	public Value get(Key key) {
		TreeNode temp = head;
		while (temp != null) {
			if (hash(key) < temp.key)
				temp = temp.left;
			else if (hash(key) > temp.key)
				temp = temp.right;
			else if (isEqual(key, temp.value.key))
				return temp.value.value;
			else
				temp.value = temp.value.next;
			}
		throw new IllegalArgumentException("No such key.");
		}
		
	
	private int hash(Key key) {
		if (key == null)
			return 0;
		else
			return Math.abs(key.hashCode());
	}
	
	public int height() {
		return heightCalc(head) - 1; //ignores empty head node
	}
	
	private int heightCalc(TreeNode head) {
		if (head == null)
			return 0;
		else {
			int left = heightCalc(head.left);
			int right = heightCalc(head.right);
			if (left > right)
				return left + 1;
			else
				return right + 1;
		}
	}
	
	public void put(Key key, Value value) {
		TreeNode temp = head;
		while(true) {
			if (hash(key) < temp.key) {
				if (temp.left == null) {
					ValueNode valuenode = new ValueNode(key, value, null);
					temp.left = new TreeNode(hash(key), valuenode, null, null);
					return;
				}
				else
					temp = temp.left;
			}
			else if (hash(key) > temp.key) {
				if (temp.right == null) {
					ValueNode valuenode = new ValueNode(key, value, null);
					temp.right = new TreeNode(hash(key), valuenode, null, null);
					return;
				}
				else
					temp = temp.right;
			}
			else /*if (hash(key) == temp.key)*/{
				if (temp.value == null) { 
					temp.value = new ValueNode(key, value, null);
					return;
				}
				else {
					temp.value = temp.value.next;
				}
			}
		}
	}
}

class HBSTifier  
{   
  private final static String[] keys =   
   { "abstract",     "assert",       "boolean",     "break",  
     "byte",         "case",         "catch",       "char",  
     "class",        "const",        "continue",    "default",  
     "do",           "double",       "else",        "extends",  
     "false",        "final",        "finally",     "float",  
     "for",          "goto",         "if",          "implements",  
     "import",       "instanceof",   "int",         "interface",  
     "long",         "native",       "new",         "null",  
     "package",      "private",      "protected",   "public",  
     "return",       "short",        "static",      "super",  
     "switch",       "synchronized", "this",        "throw",  
     "throws",       "transient",    "true",        "try",  
     "var",          "void",         "volatile",    "while" };  
       
  public static void main(String [] args)  
  {  
    HBST<String, Integer> hbst = new HBST<String, Integer>();  
  
    for (int index = 0; index < keys.length; index += 1)  
    {  
      hbst.put(keys[index], index);  
    }  
       
    System.out.println(hbst.height());  
   
    for (int index = 0; index < keys.length; index += 1)  
    {  
      System.out.format("%02d %s", hbst.get(keys[index]), keys[index]);  
      System.out.println();  
    }  
  }  
}

/*File output
17
00 abstract
01 assert
02 boolean
03 break
04 byte
05 case
06 catch
07 char
08 class
09 const
10 continue
11 default
12 do
13 double
14 else
15 extends
16 false
17 final
18 finally
19 float
20 for
21 goto
22 if
23 implements
24 import
25 instanceof
26 int
27 interface
28 long
29 native
30 new
31 null
32 package
33 private
34 protected
35 public
36 return
37 short
38 static
39 super
40 switch
41 synchronized
42 this
43 throw
44 throws
45 transient
46 true
47 try
48 var
49 void
50 volatile
51 while
*/
