class ObservationDeque
{

//  MAIN. Test the DEQUE on various example arguments.

  public static void main(String [] args)
  {
    Deque<String> deque = new Deque<String>();

    System.out.println(deque.isEmpty());       // true                2 points.

    try
    {
      System.out.println(deque.dequeueFront());
    }
    catch (IllegalStateException ignore)
    {
      System.out.println("No dequeueFront.");  //  No dequeueFront.   2 points.
    }

    try
    {
      System.out.println(deque.dequeueRear());
    }
    catch (IllegalStateException ignore)
    {
      System.out.println("No dequeueRear.");   //  No dequeueRear.    2 points.
    }

//  Enqueueing to the rear and dequeueing from the rear makes the DEQUE act
//  like a stack.

    deque.enqueueRear("A");
    deque.enqueueRear("B");
    deque.enqueueRear("C");

    System.out.println(deque.isEmpty());       //  false              2 points.

    System.out.println(deque.dequeueRear());   //  C                  2 points.
    System.out.println(deque.dequeueRear());   //  B                  2 points.
    System.out.println(deque.dequeueRear());   //  A                  2 points.

    System.out.println(deque.isEmpty());       //  true               2 points.

//  Enqueueing to the rear and dequeueing from the front makes the DEQUE act
//  like a queue.

    deque.enqueueRear("A");
    deque.enqueueRear("B");
    deque.enqueueRear("C");

    System.out.println(deque.dequeueFront());  //  A                  2 points.
    System.out.println(deque.dequeueFront());  //  B                  2 points.
    System.out.println(deque.dequeueFront());  //  C                  2 points.

    System.out.println(deque.isEmpty());       //  true               2 points.

//  Enqueueing to the front and dequeueing from the front makes the DEQUE act
//  like a stack.

    deque.enqueueFront("A");
    deque.enqueueFront("B");
    deque.enqueueFront("C");

    System.out.println(deque.dequeueFront());  //  C                  2 points.
    System.out.println(deque.dequeueFront());  //  B                  2 points.
    System.out.println(deque.dequeueFront());  //  A                  2 points.

    System.out.println(deque.isEmpty());       //  true               2 points.

//  Enqueueing to the front and dequeueing from the rear makes the DEQUE act
//  like a queue.

    deque.enqueueFront("A");
    deque.enqueueFront("B");
    deque.enqueueFront("C");

    System.out.println(deque.dequeueRear());   //  A                  2 points.
    System.out.println(deque.dequeueRear());   //  B                  2 points.
    System.out.println(deque.dequeueRear());   //  C                  2 points.

    System.out.println(deque.isEmpty());       //  true               2 points.
  }
}




class Deque<Base>
{
	private class Node
	{
		private Base value;
		private Node right;
		private Node left;
		private Node(Base value, Node left, Node right)
		{
			this.value = value;
			this.right = right;
			this.left = left;
		}
	}	
	
	private Node head;
	public Deque()
	{
		head = new Node(null,null,null);
		head.left = head;
		head.right = head;
	}
	
	public void enqueueFront(Base object)
	{
		Node node = new Node(object, head, head.right);
		head.right.left = node;
		head.right = node;
	}
	
	public void enqueueRear(Base object)
	{
		Node node = new Node(object, head.left, head);
		head.left.right = node;
		head.left = node;
	}
	
	public Base dequeueFront()
	{
		if(isEmpty())
			throw new IllegalStateException("Deque is empty");
		else
		{
			Node node = head.right;
			head.right = node.right;
			head.right.left = head;
			return node.value;
		}
	}
	
	public Base dequeueRear()
	{
		if(isEmpty())
			throw new IllegalStateException("Deque is empty");
		else
		{
			Node node = head.left;
			head.left = node.left;
			head.left.right = head;
			return node.value;
		}
	}
	
	public boolean isEmpty()
	{
		return head.left == head && head.right == head;
	}
}
