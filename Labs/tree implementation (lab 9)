class FamilyTree
{
	private class Node
	{
		private String value;
		private Node father;
		private Node mother;
		private Node(String value, Node father, Node mother)
		{
			this.value = value;
			this.father = father;
			this.mother = mother;
		}
	}
	
	private Node root;
	public FamilyTree(String ego)
	{
		root = new Node(ego, null, null);
	}
	
	private Node find(String name)
	{
		return find(name, root);
	}
	
	private Node find(String name, Node root)
	{
		if(root == null || root.value.equals(name))
			return root;
		else
		{
			Node temp = find(name, root.father);
			if (temp!=null)
				return temp;
			else
				return find(name, root.mother);
		}	
	}
	
	public void addParents(String ego, String father, String mother)
	{
		Node temp = find(ego);
		if(temp != null)
		{
			temp.father = new Node(father, null,null);
			temp.mother = new Node(mother, null, null);
		}
		else
			throw new IllegalArgumentException(ego + " cannot be found");

	}
	
	public boolean isDescendant(String ego, String ancestor)
	{
		Node egoNode = find(ego);
		Node ancNode = find(ancestor);
		
		if(egoNode==null || ancNode==null)
			return false;
		else
			return isDescendant(egoNode, ancNode);
	}
	
	public boolean isDescendant(Node root, Node ancestor)
	{
		return find(ancestor.value, root) != null;
	}
}

//POTTERY. Driver class.

class Pottery
{

//MAIN. For testing. Each comment shows a point value (there's a total of 40
//points) and what it should print.

public static void main(String [] args) 
{
FamilyTree family = new FamilyTree("Al");

family.addParents("Al",    "Harry",  "Ginny");
family.addParents("Harry", "James",  "Lily" );
family.addParents("Ginny", "Arthur", "Molly");

try
{
  family.addParents("Joanne", "Peter", "Anne");
}
catch (IllegalArgumentException ignore)
{
  System.out.println("No Joanne.");  //  2 No Joanne.
}

System.out.println(family.isDescendant("Joanne", "Joanne"));  //  2 false

System.out.println(family.isDescendant("Al", "Al"));          //  2 true
System.out.println(family.isDescendant("Al", "Harry"));       //  2 true
System.out.println(family.isDescendant("Al", "Ginny"));       //  2 true
System.out.println(family.isDescendant("Al", "James"));       //  2 true
System.out.println(family.isDescendant("Al", "Lily"));        //  2 true
System.out.println(family.isDescendant("Al", "Arthur"));      //  2 true
System.out.println(family.isDescendant("Al", "Molly"));       //  2 true
System.out.println(family.isDescendant("Al", "Joanne"));      //  2 false

System.out.println(family.isDescendant("Harry", "Harry"));    //  2 true
System.out.println(family.isDescendant("Harry", "Al"));       //  2 false
System.out.println(family.isDescendant("Harry", "James"));    //  2 true
System.out.println(family.isDescendant("Harry", "Lily"));     //  2 true
System.out.println(family.isDescendant("Harry", "Ginny"));    //  2 false
System.out.println(family.isDescendant("Harry", "Arthur"));   //  2 false
System.out.println(family.isDescendant("Harry", "Molly"));    //  2 false
System.out.println(family.isDescendant("Harry", "Joanne"));   //  2 false

System.out.println(family.isDescendant("Ginny", "Arthur"));   //  2 true
System.out.println(family.isDescendant("Arthur", "Ginny"));   //  2 false
}  
}
