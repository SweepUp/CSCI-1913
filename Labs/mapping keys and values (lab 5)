public class Map<Key, Value> {
	private Key[] keys;
	private Value[] values;
	private int count;
	public Map(int length)
	{
		if (length >= 0) 
		{
			values = (Value[])new Object[length];
			keys = (Key[])new Object[length];
			count = 0;
		}
		else 
		{
			throw new IllegalArgumentException("Length cannot be negative");
		}	
	}
	public Map()
	{
		this(5);
	}
	public Value get(Key key) 
	{
		int i = this.where(key);
		if (i >= 0) {
			return values[i];
		}
		else {
			throw new IllegalArgumentException("Key does not exist.");
		}	
	}
	private boolean isEqual(Key leftKey, Key rightKey)
	{
		if (leftKey==null)
		{
			return rightKey==null;
		}
		else
		{
			return leftKey.equals(rightKey);
		}
	}
	public boolean isIn(Key key) 
	{
		return this.where(key) >= 0;
	}
	public void put(Key key, Value value) 
	{
		int i = this.where(key);
		if (i >= 0)
		{
			values[i]=value;
		}
		else
		{
			if (count < keys.length)
			{
				keys[count]=key;
				values[count]=value;
				count+=1;
			}
			else
			{
				throw new IllegalStateException("Array overflow");
			}
		}
	}
	public int where(Key key)
	{
		for (int i = 0; i < count; i += 1)
		{
			if (isEqual(key, keys[i]))
			{
				return i;
			}
		}
		return -1;
	}
}
